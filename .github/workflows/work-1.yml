name: CI/CD with SSM

on:
  push:
    branches: [ "develop" ]  # develop 브랜치 푸시 시 트리거

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2) JDK 세팅 (Gradle 빌드 시 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) 빌드 (예: Gradle 사용, dev 프로필)
      - name: Build Jar
        run: |
          ./gradlew clean build -Pdev
        # Maven 사용 시:
        # mvn clean package -Pdev

      # 4) Docker 로그인 (GHCR)
      - name: Docker Login to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      # 5) Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="ghcr.io/${{ secrets.GHCR_USERNAME }}/my-bookstore:develop-latest"

          # Jar 파일 빌드를 마친 후, Dockerfile에서 Jar 경로를 ARG로 전달
          docker build -t $IMAGE_NAME \
            --build-arg JAR_FILE=build/libs/*.jar \
            -f Dockerfile .

          docker push $IMAGE_NAME

      # 6) AWS CLI 설정
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ secrets.AWS_DEFAULT_REGION }}"

      # 7) SSM으로 EC2에서 Docker 명령 실행
      - name: Deploy via SSM
        run: |
          IMAGE_NAME="ghcr.io/${{ secrets.GHCR_USERNAME }}/my-bookstore:develop-latest"

          aws ssm send-command \
            --instance-ids "${{ secrets.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy new Docker image" \
            --parameters commands="
              docker pull $IMAGE_NAME;
              mkdir -p ~/usr/bin/test/ci && touch ~/usr/bin/test/ci/cd.txt;
              docker stop bookstore-app || true;
              docker rm bookstore-app || true;
              docker run -d --name bookstore-app \
                -p 8080:8080 \
                -e SPRING_PROFILES_ACTIVE=dev \
                $IMAGE_NAME
            " \
            --timeout-seconds 600 \
            --max-concurrency "1" \
            --max-errors "0"

      - name: Test SSM Command with Absolute Path
        run: |
          COMMANDS="mkdir -p /usr/bin/test-dir && touch /usr/bin/test-dir/test-file.txt && ls -la /home/ubuntu/test-dir"
          
          RESPONSE=$(aws ssm send-command \
            --instance-ids "${{ secrets.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Test SSM Command with Absolute Path" \
            --parameters commands="$COMMANDS" \
            --timeout-seconds 600 \
            --max-concurrency "1" \
            --max-errors "0" \
            --output json)
          
          echo "SSM Command Response: $RESPONSE"
          
          COMMAND_ID=$(echo "$RESPONSE" | jq -r '.Command.CommandId')
          echo "Command ID: $COMMAND_ID"
          
          # 명령어 실행 상태 확인
          STATUS=""
          while [[ "$STATUS" != "Success" && "$STATUS" != "Failed" && "$STATUS" != "Cancelled" && "$STATUS" != "TimedOut" ]]; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets.INSTANCE_ID }}" \
              --query 'Status' \
              --output text)
            echo "Current Status: $STATUS"
            sleep 5
          done
          
          # 명령어 출력 확인
          OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.INSTANCE_ID }}" \
            --query 'StandardOutputContent' \
            --output text)
          
          ERROR_OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.INSTANCE_ID }}" \
            --query 'StandardErrorContent' \
            --output text)
          
          echo "Command Output: $OUTPUT"
          echo "Error Output: $ERROR_OUTPUT"
          
          # 상태가 실패인 경우 워크플로우 실패 처리
          if [[ "$STATUS" != "Success" ]]; then
            echo "SSM Command failed with status: $STATUS"
            exit 1
          fi
        shell: /usr/bin/bash -e {0}
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.13-11/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.13-11/x64

