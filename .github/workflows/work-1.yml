name: CI/CD with SSM

on:
  push:
    branches: [ "develop" ]  # develop 브랜치 푸시 시 트리거

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2) JDK 세팅 (Gradle 빌드 시 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      # 3) 빌드 (예: Gradle 사용, prod 프로필)
      - name: Build Jar
        run: |
          ./gradlew clean build -Pprod
        # Maven 사용 시:
        # mvn clean package -Pprod

      # 4) Docker 로그인 (GHCR)
      - name: Docker Login to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      # 5) Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="ghcr.io/${{ secrets.GHCR_USERNAME }}/my-bookstore:develop-latest"

          # Jar 파일 빌드를 마친 후, Dockerfile에서 Jar 경로를 ARG로 전달
          docker build -t $IMAGE_NAME \
            --build-arg JAR_FILE=build/libs/*.jar \
            -f Dockerfile .

          docker push $IMAGE_NAME

      # 6) AWS CLI 설정
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ secrets.AWS_DEFAULT_REGION }}"

      # 7) SSM으로 EC2에서 Docker 명령 실행
      - name: Deploy via SSM
        run: |
          IMAGE_NAME="ghcr.io/${{ secrets.GHCR_USERNAME }}/my-bookstore:develop-latest"

          aws ssm send-command \
            --instance-ids "${{ secrets.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy new Docker image" \
            --parameters commands="
              docker pull $IMAGE_NAME;
              docker stop bookstore-app || true;
              docker rm bookstore-app || true;
              docker run -d --name bookstore-app \
                -p 8080:8080 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/book_store \
                -e SPRING_DATASOURCE_USERNAME=admin \
                -e SPRING_DATASOURCE_PASSWORD=1234 \
                $IMAGE_NAME
            " \
            --timeout-seconds 600 \
            --max-concurrency "1" \
            --max-errors "0"
